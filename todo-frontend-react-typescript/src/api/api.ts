// tslint:disable
/**
 * Todo
 * Sample todo-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Todo
 */
export interface Todo {
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    title?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Todo
     */
    resolved?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Todo
     */
    when?: string;
}

/**
 * TodoServiceApi - axios parameter creator
 * @export
 */
export const TodoServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addTodo
         * @param {string} user 
         * @param {Todo} [todo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodo(user: string, todo?: Todo, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling addTodo.');
            }
            const localVarPath = `/todo/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof todo !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(todo !== undefined ? todo : {}) : (todo || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary listTodos
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTodos(user: string, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling listTodos.');
            }
            const localVarPath = `/todo/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeAll
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllTodos(user: string, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling removeAllTodos.');
            }
            const localVarPath = `/todo/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary removeTodo
         * @param {string} user 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTodo(user: string, id: string, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling removeTodo.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeTodo.');
            }
            const localVarPath = `/todo/{user}/{id}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary resolveTodo
         * @param {string} id 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveTodo(id: string, user: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resolveTodo.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling resolveTodo.');
            }
            const localVarPath = `/todo/{user}/{id}/resolve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoServiceApi - functional programming interface
 * @export
 */
export const TodoServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addTodo
         * @param {string} user 
         * @param {Todo} [todo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodo(user: string, todo?: Todo, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>> {
            const localVarAxiosArgs = TodoServiceApiAxiosParamCreator(configuration).addTodo(user, todo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary listTodos
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTodos(user: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>> {
            const localVarAxiosArgs = TodoServiceApiAxiosParamCreator(configuration).listTodos(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeAll
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllTodos(user: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TodoServiceApiAxiosParamCreator(configuration).removeAllTodos(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary removeTodo
         * @param {string} user 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTodo(user: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>> {
            const localVarAxiosArgs = TodoServiceApiAxiosParamCreator(configuration).removeTodo(user, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary resolveTodo
         * @param {string} id 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveTodo(id: string, user: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>> {
            const localVarAxiosArgs = TodoServiceApiAxiosParamCreator(configuration).resolveTodo(id, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TodoServiceApi - factory interface
 * @export
 */
export const TodoServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addTodo
         * @param {string} user 
         * @param {Todo} [todo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodo(user: string, todo?: Todo, options?: any): AxiosPromise<Array<Todo>> {
            return TodoServiceApiFp(configuration).addTodo(user, todo, options)(axios, basePath);
        },
        /**
         * 
         * @summary listTodos
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTodos(user: string, options?: any): AxiosPromise<Array<Todo>> {
            return TodoServiceApiFp(configuration).listTodos(user, options)(axios, basePath);
        },
        /**
         * 
         * @summary removeAll
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllTodos(user: string, options?: any): AxiosPromise<void> {
            return TodoServiceApiFp(configuration).removeAllTodos(user, options)(axios, basePath);
        },
        /**
         * 
         * @summary removeTodo
         * @param {string} user 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTodo(user: string, id: string, options?: any): AxiosPromise<Array<Todo>> {
            return TodoServiceApiFp(configuration).removeTodo(user, id, options)(axios, basePath);
        },
        /**
         * 
         * @summary resolveTodo
         * @param {string} id 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveTodo(id: string, user: string, options?: any): AxiosPromise<Array<Todo>> {
            return TodoServiceApiFp(configuration).resolveTodo(id, user, options)(axios, basePath);
        },
    };
};

/**
 * TodoServiceApi - object-oriented interface
 * @export
 * @class TodoServiceApi
 * @extends {BaseAPI}
 */
export class TodoServiceApi extends BaseAPI {
    /**
     * 
     * @summary addTodo
     * @param {string} user 
     * @param {Todo} [todo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public addTodo(user: string, todo?: Todo, options?: any) {
        return TodoServiceApiFp(this.configuration).addTodo(user, todo, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary listTodos
     * @param {string} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public listTodos(user: string, options?: any) {
        return TodoServiceApiFp(this.configuration).listTodos(user, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary removeAll
     * @param {string} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public removeAllTodos(user: string, options?: any) {
        return TodoServiceApiFp(this.configuration).removeAllTodos(user, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary removeTodo
     * @param {string} user 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public removeTodo(user: string, id: string, options?: any) {
        return TodoServiceApiFp(this.configuration).removeTodo(user, id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary resolveTodo
     * @param {string} id 
     * @param {string} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoServiceApi
     */
    public resolveTodo(id: string, user: string, options?: any) {
        return TodoServiceApiFp(this.configuration).resolveTodo(id, user, options)(this.axios, this.basePath);
    }

}


