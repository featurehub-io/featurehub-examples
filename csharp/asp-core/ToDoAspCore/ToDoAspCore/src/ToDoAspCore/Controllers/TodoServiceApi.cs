/*
 * Todo
 *
 * Sample todo-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using FeatureHubSDK;
using IO.FeatureHub.SSE.Model;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using ToDoAspCore.Attributes;
using ToDoAspCore.Models;
using ToDoAspCore.Services;

namespace ToDoAspCore.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TodoServiceApiController : ControllerBase
    {
        private readonly ITodoServiceRepository _todoServiceRepository;
        private readonly IFeatureHubConfig _featureHub;

        public TodoServiceApiController(ITodoServiceRepository todoServiceRepository, IFeatureHubConfig featureHub)
        {
            _todoServiceRepository = todoServiceRepository;
            _featureHub = featureHub;
        }

        private List<Todo> GetTodosForUser(string user)
        {
            return _todoServiceRepository.UsersTodos(user);
        }

        /// <summary>
        /// addTodo
        /// </summary>
        /// <param name="user"></param>
        /// <param name="todo"></param>
        /// <response code="201"></response>
        [HttpPost]
        [Route("/todo/{user}")]
        [ValidateModelState]
        [SwaggerOperation("AddTodo")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<Todo>), description: "")]
        public virtual async Task<IActionResult> AddTodo([FromRoute] [Required] string user, [FromBody] Todo todo)
        {
            if (todo.Id == null)
            {
                todo.Id = new Guid().ToString();
            }

            var todos = GetTodosForUser(user);

            todos.Add(todo);

            var result = new ObjectResult(await TransformTodos(user, todos)) {StatusCode = 201};
            return result;
        }

        private async Task<List<Todo>> TransformTodos(string user, List<Todo> todos)
        {
            var ctx = await _featureHub.NewContext().UserKey(user).Platform(StrategyAttributePlatformName.Macos)
                .Build();
            var t = new List<Todo>();
            foreach (var todo in todos)
            {
                var nTodo = new Todo();
                nTodo.Id = todo.Id;
                nTodo.Resolved = todo.Resolved;
                nTodo.Title = _ProcessTitle(ctx, todo.Title);
                nTodo.When = todo.When;
                t.Add(nTodo);
            }

            return t;
        }

        private string _ProcessTitle(IClientContext ctx, string title)
        {
            if (title == null)
            {
                return null;
            }

            if (ctx == null)
            {
                return title;
            }

            if (ctx.IsSet("FEATURE_STRING") && "buy" == title)
            {
                title = title + " " + ctx["FEATURE_STRING"].StringValue;
                // log.debug("Processes string feature: {}", title);
            }

            if (ctx.IsSet("FEATURE_NUMBER") && title == "pay")
            {
                title = title + " " + ctx["FEATURE_NUMBER"].NumberValue.ToString();
                // log.debug("Processed number feature {}", title);
            }

            if (ctx.IsSet("FEATURE_JSON") && title == "find")
            {
                var feat = JsonConvert.DeserializeObject<Dictionary<string, string>>(ctx["FEATURE_JSON"].JsonValue);

                title = title + " " + (feat.ContainsKey("foo") ? feat["foo"] : ""); 
                // log.debug("Processed JSON feature {}", title);
            }

            if (ctx.IsEnabled("FEATURE_TITLE_TO_UPPERCASE"))
            {
                title = title.ToUpper();
                // log.debug("Processed boolean feature {}", title);
            }

            return title;
        }

        /// <summary>
        /// listTodos
        /// </summary>
        /// <param name="user"></param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/todo/{user}")]
        [ValidateModelState]
        [SwaggerOperation("ListTodos")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Todo>), description: "")]
        public virtual async Task<IActionResult> ListTodos([FromRoute] [Required] string user)
        {
            var todos = await TransformTodos(user, GetTodosForUser(user));
            var result = new ObjectResult(todos) {StatusCode = 200};
            return result;
        }

        /// <summary>
        /// removeAll
        /// </summary>
        /// <param name="user"></param>
        /// <response code="204"></response>
        [HttpDelete]
        [Route("/todo/{user}")]
        [ValidateModelState]
        [SwaggerOperation("RemoveAllTodos")]
        public virtual IActionResult RemoveAllTodos([FromRoute] [Required] string user)
        {
            GetTodosForUser(user).Clear();

            return StatusCode(204);
        }

        /// <summary>
        /// removeTodo
        /// </summary>
        /// <param name="user"></param>
        /// <param name="id"></param>
        /// <response code="200"></response>
        [HttpDelete]
        [Route("/todo/{user}/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RemoveTodo")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Todo>), description: "")]
        public virtual async Task<IActionResult> RemoveTodo([FromRoute] [Required] string user,
            [FromRoute] [Required] string id)
        {
            var todos = GetTodosForUser(user);
            todos.RemoveAll((t) => t.Id == id);
            var result = new ObjectResult(await TransformTodos(user, todos)) {StatusCode = 200};
            return result;
        }

        /// <summary>
        /// resolveTodo
        /// </summary>
        /// <param name="id"></param>
        /// <param name="user"></param>
        /// <response code="200"></response>
        [HttpPut]
        [Route("/todo/{user}/{id}/resolve")]
        [ValidateModelState]
        [SwaggerOperation("ResolveTodo")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Todo>), description: "")]
        public virtual async Task<IActionResult> ResolveTodo([FromRoute] [Required] string id,
            [FromRoute] [Required] string user)
        {
            var todos = GetTodosForUser(user);
            foreach (var todo in todos)
            {
                if (todo.Id == id)
                {
                    todo.Resolved = true;
                }
            }

            var result = new ObjectResult(await TransformTodos(user, todos)) {StatusCode = 200};
            return result;
        }
    }
}